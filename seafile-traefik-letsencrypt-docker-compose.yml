networks:
  seafile-network:
    external: true
  traefik-network:
    external: true

volumes:
  mariadb-data:
  seafile-data:
  seafile-mariadb-backup:
  seafile-data-backups:
  seafile-database-backups:
  traefik-certificates:

services:
  mariadb:
    image: ${SEAFILE_MARIADB_IMAGE_TAG}
    volumes:
      - mariadb-data:/var/lib/mysql
    environment:
      MARIADB_USER: ${SEAFILE_DB_USER}
      MARIADB_PASSWORD: ${SEAFILE_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${SEAFILE_DB_ADMIN_PASSWORD}
    networks:
      - seafile-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  memcached:
    command: memcached -m 256M
    image: ${SEAFILE_MEMCACHE_IMAGE_TAG}
    networks:
      - seafile-network
    restart: unless-stopped

  seafile:
    image: ${SEAFILE_IMAGE_TAG}
    volumes:
      - seafile-data:${DATA_PATH}
    environment:
      MYSQL_SERVER: mariadb
      MYSQL_USER: ${SEAFILE_DB_USER}
      MYSQL_USER_PASSWORD: ${SEAFILE_DB_PASSWORD}
      MYSQL_PORT: 3306
      SEAFILE_NAME: ${SEAFILE_SITE_NAME}
      SEAFILE_ADDRESS: ${SEAFILE_HOSTNAME}
      SEAFILE_ADMIN: ${SEAFILE_ADMIN_USERNAME}
      SEAFILE_ADMIN_PW: ${SEAFILE_ADMIN_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${SEAFILE_DB_ADMIN_PASSWORD}
      TIME_ZONE: ${SEAFILE_TIMEZONE}
    networks:
      - seafile-network
      - traefik-network
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8000' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Global settings for compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Match incoming requests on the specific hostname for Seafile/Seahub
      - "traefik.http.routers.seafile.rule=Host(`${SEAFILE_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.seafile.service=seafile"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.seafile.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.seafile.loadbalancer.server.port=8000"
      # Enable TLS on this router
      - "traefik.http.routers.seafile.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.seafile.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.seafile.loadbalancer.passhostheader=true"
      # Apply middlewares for security headers and compression
      - "traefik.http.routers.seafile.middlewares=sec-headers@docker,compresstraefik@docker"
      # Match incoming requests on the specific hostname for Seafdav
      - "traefik.http.routers.seafile-dav.rule=Host(`${SEAFILE_HOSTNAME}`) && PathPrefix(`/seafdav`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.seafile-dav.service=seafile-dav"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.seafile-dav.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.seafile-dav.loadbalancer.server.port=8080"
      # Enable TLS on this router
      - "traefik.http.routers.seafile-dav.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.seafile-dav.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.seafile-dav.loadbalancer.passhostheader=true"
      # Apply compression middleware
      - "traefik.http.routers.seafile-dav.middlewares=compresstraefik@docker"
      # Match incoming requests on the specific hostname for Seafhttp
      - "traefik.http.routers.seafile-http.rule=Host(`${SEAFILE_HOSTNAME}`) && PathPrefix(`/seafhttp`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.seafile-http.service=seafile-http"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.seafile-http.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.seafile-http.loadbalancer.server.port=8082"
      # Enable TLS on this router
      - "traefik.http.routers.seafile-http.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.seafile-http.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.seafile-http.loadbalancer.passhostheader=true"
      # Apply middlewares for stripping prefix and compression
      - "traefik.http.middlewares.seafile-strip.stripprefix.prefixes=/seafhttp"
      - "traefik.http.routers.seafile-http.middlewares=seafile-strip@docker,compresstraefik@docker"
      # Security headers settings
      - "traefik.http.middlewares.sec-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.sec-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.sec-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.sec-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.sec-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.sec-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.sec-headers.headers.referrerPolicy=same-origin"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"

    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      # Set the log level (DEBUG, INFO, WARN, ERROR)
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # Enable the built-in API and web-based dashboard on /dashboard
      - "--api.dashboard=true"
      # Enable the /ping endpoint so we can health-check Traefik
      - "--ping=true"
      # Assign the /ping endpoint to a dedicated entry point on port 8082
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8082"
      # Define the primary HTTP entry point on port 80
      - "--entrypoints.web.address=:80"
      # Define the secure (HTTPS) entry point on port 443
      - "--entrypoints.websecure.address=:443"
      # Enable the Docker provider to detect containers and their labels
      - "--providers.docker=true"
      # Point Traefik to the Docker socket
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Prevent automatic exposure of all containers; only expose containers
      # with "traefik.enable=true"
      - "--providers.docker.exposedbydefault=false"
      # Use ACME (Let's Encrypt) to generate/renew certificates via TLS challenge
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # The email address used by Let's Encrypt for renewal notices
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      # The file where ACME certificates are stored inside the container
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Enable Prometheus metrics
      - "--metrics.prometheus=true"
      # Configure Prometheus histogram buckets
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # Check for newer Traefik versions and optionally log that info
      - "--global.checknewversion=true"
      # Disable sending anonymous usage data to the Traefik maintainers
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      # Enable Traefik for this container.
      - "traefik.enable=true"
      # A router to expose the Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      # asic Authentication for the Traefik dashboard
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Specify the internal server port to the dashboard service
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      # Pass the original Host header to the backend
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      # HTTP -> HTTPS redirect for all hosts
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: ${SEAFILE_MARIADB_IMAGE_TAG}
    command: >-
      sh -c 'sleep $BACKUP_INIT_SLEEP &&
      while true; do
        mariadb-dump -h mariadb -u $SEAFILE_DB_USER -p"$SEAFILE_DB_PASSWORD" --all-databases | gzip > "$MARIADB_BACKUPS_PATH/$MARIADB_BACKUP_NAME-$(date '+%Y-%m-%d_%H-%M').gz" &&
        tar -zcpf $DATA_BACKUPS_PATH/$DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $DATA_PATH &&
        find $MARIADB_BACKUPS_PATH -type f -mtime +$MARIADB_BACKUP_PRUNE_DAYS | xargs rm -f &&
        find $DATA_BACKUPS_PATH -type f -mtime +$DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
        sleep $BACKUP_INTERVAL; done'
    volumes:
      - seafile-mariadb-backup:/var/lib/mysql
      - seafile-data:${DATA_PATH}
      - seafile-data-backups:${DATA_BACKUPS_PATH}
      - seafile-database-backups:${MARIADB_BACKUPS_PATH}
    environment:
      SEAFILE_DB_USER: ${SEAFILE_DB_USER}
      SEAFILE_DB_PASSWORD: ${SEAFILE_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${SEAFILE_DB_ADMIN_PASSWORD}
      BACKUP_INIT_SLEEP: ${BACKUP_INIT_SLEEP}
      BACKUP_INTERVAL: ${BACKUP_INTERVAL}
      MARIADB_BACKUP_PRUNE_DAYS: ${MARIADB_BACKUP_PRUNE_DAYS}
      DATA_BACKUP_PRUNE_DAYS: ${DATA_BACKUP_PRUNE_DAYS}
      MARIADB_BACKUPS_PATH: ${MARIADB_BACKUPS_PATH}
      DATA_BACKUPS_PATH: ${DATA_BACKUPS_PATH}
      DATA_PATH: ${DATA_PATH}
      MARIADB_BACKUP_NAME: ${MARIADB_BACKUP_NAME}
      DATA_BACKUP_NAME: ${DATA_BACKUP_NAME}
    networks:
      - seafile-network
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
