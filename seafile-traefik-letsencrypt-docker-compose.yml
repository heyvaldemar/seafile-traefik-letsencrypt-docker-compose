# Seafile with Let's Encrypt Using Docker Compose

# The complete installation guide is available on my website https://www.heyvaldemar.com/install-seafile-using-docker-compose/

# Change variables in the `.env` to meet your requirements.
# Note that the `.env` file should be in the same directory as `seafile-traefik-letsencrypt-docker-compose.yml`.

# Create networks for your services before deploying the configuration using the commands:
# `docker network create traefik-network`
# `docker network create seafile-network`

# Deploy Seafile using Docker Compose:
# `docker compose -f seafile-traefik-letsencrypt-docker-compose.yml -p seafile up -d`

# # Fixing CSRF Verification Error (403 Forbidden) in Seafile
# If you encounter a `403 Forbidden - CSRF verification failed` error when logging into Seafile,
# follow these steps to add your domain to the trusted origins and set the correct URL for the file server.

# Run the following command, replacing `https://seafile.heyvaldemar.net` with your Seafile domain:
# ```
# export SEAFILE_DOMAIN="https://seafile.heyvaldemar.net" \
# && SEAFILE_CONTAINER=$(docker ps -aqf "name=seafile-seafile") \
# && docker exec -it $SEAFILE_CONTAINER /bin/sh -c "sed -i 's|SERVICE_URL = .*|SERVICE_URL = \"$SEAFILE_DOMAIN\"|' /opt/seafile/conf/seahub_settings.py" \
# && docker exec -it $SEAFILE_CONTAINER /bin/sh -c "sed -i '/^CSRF_TRUSTED_ORIGINS/d' /opt/seafile/conf/seahub_settings.py && echo \"CSRF_TRUSTED_ORIGINS = ['$SEAFILE_DOMAIN']\" >> /opt/seafile/conf/seahub_settings.py" \
# && docker exec -it $SEAFILE_CONTAINER /bin/sh -c "sed -i '/^FILE_SERVER_ROOT/d' /opt/seafile/conf/seahub_settings.py && echo \"FILE_SERVER_ROOT = '$SEAFILE_DOMAIN/seafhttp'\" >> /opt/seafile/conf/seahub_settings.py" \
# && docker restart $SEAFILE_CONTAINER
# ```

# This command will:
# 1. Set `SERVICE_URL` to your domain (e.g., `https://seafile.heyvaldemar.net`).
# 2. Add the domain to `CSRF_TRUSTED_ORIGINS` to allow trusted requests.
# 3. Set `FILE_SERVER_ROOT` to your domain’s file server URL.
# 4. Restart the Seafile container to apply changes.
# After running the command, try logging in again.

# Backups
# The `backups` container in the configuration is responsible for the following:
# 1. **Database Backup**: Creates compressed backups of the MariaDB database using pg_dump.
# Customizable backup path, filename pattern, and schedule through variables like `MARIADB_BACKUPS_PATH`, `MARIADB_BACKUP_NAME`, and `BACKUP_INTERVAL`.
# 2. **Application Data Backup**: Compresses and stores backups of the application data on the same schedule. Controlled via variables such as `DATA_BACKUPS_PATH`, `DATA_BACKUP_NAME`, and `BACKUP_INTERVAL`.
# 3. **Backup Pruning**: Periodically removes backups exceeding a specified age to manage storage.
# Customizable pruning schedule and age threshold with `MARIADB_BACKUP_PRUNE_DAYS` and `DATA_BACKUP_PRUNE_DAYS`.
# By utilizing this container, consistent and automated backups of the essential components of your instance are ensured.
# Moreover, efficient management of backup storage and tailored backup routines can be achieved through easy and flexible configuration using environment variables.

# # seafile-restore-database.sh Description
# This script facilitates the restoration of a database backup.
# 1. **Identify Containers**: It first identifies the service and backups containers by name, finding the appropriate container IDs.
# 2. **List Backups**: Displays all available database backups located at the specified backup path.
# 3. **Select Backup**: Prompts the user to copy and paste the desired backup name from the list to restore the database.
# 4. **Stop Service**: Temporarily stops the service to ensure data consistency during restoration.
# 5. **Restore Database**: Executes a sequence of commands to drop the current database, create a new one, and restore it from the selected compressed backup file.
# 6. **Start Service**: Restarts the service after the restoration is completed.
# To make the `seafile-restore-database.shh` script executable, run the following command:
# `chmod +x seafile-restore-database.sh`
# Usage of this script ensures a controlled and guided process to restore the database from an existing backup.

# # seafile-restore-application-data.sh Description
# This script is designed to restore the application data.
# 1. **Identify Containers**: Similarly to the database restore script, it identifies the service and backups containers by name.
# 2. **List Application Data Backups**: Displays all available application data backups at the specified backup path.
# 3. **Select Backup**: Asks the user to copy and paste the desired backup name for application data restoration.
# 4. **Stop Service**: Stops the service to prevent any conflicts during the restore process.
# 5. **Restore Application Data**: Removes the current application data and then extracts the selected backup to the appropriate application data path.
# 6. **Start Service**: Restarts the service after the application data has been successfully restored.
# To make the `seafile-restore-application-data.sh` script executable, run the following command:
# `chmod +x seafile-restore-application-data.sh`
# By utilizing this script, you can efficiently restore application data from an existing backup while ensuring proper coordination with the running service.

# Author
# I’m Vladimir Mikhalev, the Docker Captain, but my friends can call me Valdemar.
# https://www.docker.com/captains/vladimir-mikhalev/

# My website with detailed IT guides: https://www.heyvaldemar.com/
# Follow me on YouTube: https://www.youtube.com/channel/UCf85kQ0u1sYTTTyKVpxrlyQ?sub_confirmation=1
# Follow me on Twitter: https://twitter.com/heyValdemar
# Follow me on Instagram: https://www.instagram.com/heyvaldemar/
# Follow me on Threads: https://www.threads.net/@heyvaldemar
# Follow me on Mastodon: https://mastodon.social/@heyvaldemar
# Follow me on Bluesky: https://bsky.app/profile/heyvaldemar.bsky.social
# Follow me on Facebook: https://www.facebook.com/heyValdemarFB/
# Follow me on TikTok: https://www.tiktok.com/@heyvaldemar
# Follow me on LinkedIn: https://www.linkedin.com/in/heyvaldemar/
# Follow me on GitHub: https://github.com/heyvaldemar

# Communication
# Chat with IT pros on Discord: https://discord.gg/AJQGCCBcqf
# Reach me at ask@sre.gg

# Give Thanks
# Support on GitHub: https://github.com/sponsors/heyValdemar
# Support on Patreon: https://www.patreon.com/heyValdemar
# Support on BuyMeaCoffee: https://www.buymeacoffee.com/heyValdemar
# Support on Ko-fi: https://ko-fi.com/heyValdemar
# Support on PayPal: https://www.paypal.com/paypalme/heyValdemarCOM

networks:
  seafile-network:
    external: true
  traefik-network:
    external: true

volumes:
  mariadb-data:
  seafile-data:
  seafile-mariadb-backup:
  seafile-data-backups:
  seafile-database-backups:
  traefik-certificates:

services:
  mariadb:
    image: ${SEAFILE_MARIADB_IMAGE_TAG}
    volumes:
      - mariadb-data:/var/lib/mysql
    environment:
      MARIADB_USER: ${SEAFILE_DB_USER}
      MARIADB_PASSWORD: ${SEAFILE_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${SEAFILE_DB_ADMIN_PASSWORD}
    networks:
      - seafile-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  memcached:
    command: memcached -m 256M
    image: ${SEAFILE_MEMCACHE_IMAGE_TAG}
    networks:
      - seafile-network
    restart: unless-stopped

  seafile:
    image: ${SEAFILE_IMAGE_TAG}
    volumes:
      - seafile-data:${DATA_PATH}
    environment:
      MYSQL_SERVER: mariadb
      MYSQL_USER: ${SEAFILE_DB_USER}
      MYSQL_USER_PASSWORD: ${SEAFILE_DB_PASSWORD}
      MYSQL_PORT: 3306
      SEAFILE_NAME: ${SEAFILE_SITE_NAME}
      SEAFILE_ADDRESS: ${SEAFILE_HOSTNAME}
      SEAFILE_ADMIN: ${SEAFILE_ADMIN_USERNAME}
      SEAFILE_ADMIN_PW: ${SEAFILE_ADMIN_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${SEAFILE_DB_ADMIN_PASSWORD}
      TIME_ZONE: ${SEAFILE_TIMEZONE}
    networks:
      - seafile-network
      - traefik-network
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8000' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      # HTTP Router Seafile/Seahub
      - "traefik.http.routers.seafile.rule=(Host(`${SEAFILE_HOSTNAME}`))"
      - "traefik.http.routers.seafile.service=seafile"
      - "traefik.http.routers.seafile.entrypoints=websecure"
      - "traefik.http.services.seafile.loadbalancer.server.port=8000"
      - "traefik.http.routers.seafile.tls=true"
      - "traefik.http.routers.seafile.tls.certresolver=letsencrypt"
      - "traefik.http.routers.seafile.middlewares=sec-headers"
      # HTTP Router Seafdav
      - "traefik.http.routers.seafile-dav.rule=Host(`${SEAFILE_HOSTNAME}`) && PathPrefix(`/seafdav`)"
      - "traefik.http.routers.seafile-dav.service=seafile-dav"
      - "traefik.http.routers.seafile-dav.entrypoints=websecure"
      - "traefik.http.services.seafile-dav.loadbalancer.server.port=8080"
      - "traefik.http.routers.seafile-dav.tls=true"
      - "traefik.http.routers.seafile-dav.tls.certresolver=letsencrypt"
      # HTTP Router Seafhttp
      - "traefik.http.routers.seafile-http.rule=Host(`${SEAFILE_HOSTNAME}`) && PathPrefix(`/seafhttp`)"
      - "traefik.http.routers.seafile-http.service=seafile-http"
      - "traefik.http.routers.seafile-http.entrypoints=websecure"
      - "traefik.http.services.seafile-http.loadbalancer.server.port=8082"
      - "traefik.http.routers.seafile-http.tls=true"
      - "traefik.http.routers.seafile-http.tls.certresolver=letsencrypt"
      - "traefik.http.routers.seafile-http.middlewares=seafile-strip"
      # Middlewares 
      - "traefik.http.middlewares.seafile-strip.stripprefix.prefixes=/seafhttp"
      - "traefik.http.middlewares.sec-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.sec-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.sec-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.sec-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.sec-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.sec-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.sec-headers.headers.referrerPolicy=same-origin"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: ${SEAFILE_MARIADB_IMAGE_TAG}
    command: >-
      sh -c 'sleep $BACKUP_INIT_SLEEP &&
      while true; do
        mariadb-dump -h mariadb -u $SEAFILE_DB_USER -p"$SEAFILE_DB_PASSWORD" --all-databases | gzip > "$MARIADB_BACKUPS_PATH/$MARIADB_BACKUP_NAME-$(date '+%Y-%m-%d_%H-%M').gz" &&
        tar -zcpf $DATA_BACKUPS_PATH/$DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $DATA_PATH &&
        find $MARIADB_BACKUPS_PATH -type f -mtime +$MARIADB_BACKUP_PRUNE_DAYS | xargs rm -f &&
        find $DATA_BACKUPS_PATH -type f -mtime +$DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
        sleep $BACKUP_INTERVAL; done'
    volumes:
      - seafile-mariadb-backup:/var/lib/mysql
      - seafile-data:${DATA_PATH}
      - seafile-data-backups:${DATA_BACKUPS_PATH}
      - seafile-database-backups:${MARIADB_BACKUPS_PATH}
    environment:
      SEAFILE_DB_USER: ${SEAFILE_DB_USER}
      SEAFILE_DB_PASSWORD: ${SEAFILE_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${SEAFILE_DB_ADMIN_PASSWORD}
      BACKUP_INIT_SLEEP: ${BACKUP_INIT_SLEEP}
      BACKUP_INTERVAL: ${BACKUP_INTERVAL}
      MARIADB_BACKUP_PRUNE_DAYS: ${MARIADB_BACKUP_PRUNE_DAYS}
      DATA_BACKUP_PRUNE_DAYS: ${DATA_BACKUP_PRUNE_DAYS}
      MARIADB_BACKUPS_PATH: ${MARIADB_BACKUPS_PATH}
      DATA_BACKUPS_PATH: ${DATA_BACKUPS_PATH}
      DATA_PATH: ${DATA_PATH}
      MARIADB_BACKUP_NAME: ${MARIADB_BACKUP_NAME}
      DATA_BACKUP_NAME: ${DATA_BACKUP_NAME}
    networks:
      - seafile-network
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
